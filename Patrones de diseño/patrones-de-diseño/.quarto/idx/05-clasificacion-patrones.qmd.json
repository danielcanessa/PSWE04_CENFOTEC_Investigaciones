{"title":"Clasificación clásica de patrones de diseño","markdown":{"headingText":"Clasificación clásica de patrones de diseño","containsRefs":false,"markdown":"\nLa clasificación clásica de los patrones de diseño en software fue establecida por la llamada “Banda de los Cuatro” (\"Gang of Four\" o \"GoF\") en su libro *Design Patterns: Elements of Reusable Object-Oriented Software* [@gamma1994design]. En este libro, los autores describen 23 patrones fundamentales para la programación orientada a objetos, agrupando los patrones en creacionales, estructurales y de comportamiento.\n\n## 1. Patrones creacionales\n\nEstos patrones abordan la forma en que los objetos se crean, permitiendo mayor flexibilidad y control sobre la instancia de clases.\n\n### Singleton\n\n- **Propósito:** garantizar que una clase tenga solo una instancia a lo largo del ciclo de vida de la aplicación y ofrecer un punto global de acceso a ella.  \n- **Beneficios:** asegura el control centralizado de recursos y evita inconsistencias por múltiples instancias.  \n- **Contexto de uso:** ideal para gestores de configuración, controladores de acceso a base de datos, registros de logs o recursos compartidos.  \n- **Ejemplo:** Un \"GestorDeConfiguración\" único para toda la aplicación.\n\n### Factory Method\n\n- **Propósito:** definir una interfaz para crear un objeto, pero delegar a las subclases la decisión sobre qué clase concreta instanciar.  \n- **Beneficios:** permite que el sistema sea flexible y extensible, evitando acoplarse a clases concretas y facilitando la sustitución o extensión de creadores.  \n- **Contexto de uso:** cuando la creación de objetos depende de la lógica o datos que sólo se conocen en tiempo de ejecución, o para desacoplar código cliente de implementaciones concretas.  \n- **Ejemplo:** Un método `crearNotificador()` que devuelve instancias de \"NotificadorCorreo\" o \"NotificadorSMS\" según configuración.\n\n### Abstract Factory\n\n- **Propósito:** proveer una interfaz para crear familias de objetos relacionados (por ejemplo, botones y menús) sin especificar las clases concretas que se van a utilizar.  \n- **Beneficios:** asegura la coherencia entre productos de la misma familia y permite cambiar toda la familia de objetos fácilmente.  \n- **Contexto de uso:** sistemas multiplataforma, o cuando el sistema debe ser independiente de cómo se crean, componen y representan los productos.  \n- **Ejemplo:** Una fábrica de interfaces gráficas que puede crear componentes (botón, menú, ventana) para Windows o para Linux.\n\n### Builder\n\n- **Propósito:** separar la construcción de un objeto complejo de su representación final, permitiendo crear diferentes variantes de un mismo objeto mediante un proceso de construcción paso a paso.  \n- **Beneficios:** facilita la creación de objetos complejos con múltiples opciones, mejorando la legibilidad y la gestión de dependencias internas.  \n- **Contexto de uso:** objetos que requieren configuración detallada o composición de partes, como documentos, reportes o automóviles.  \n- **Ejemplo:** Un \"ConstructorDeReporte\" que permite armar reportes personalizados agregando secciones a voluntad.\n\n### Prototype\n\n- **Propósito:** crear nuevos objetos a partir de la clonación de una instancia prototipo existente, en vez de crear nuevos desde cero.  \n- **Beneficios:** agiliza la creación de objetos complejos o costosos, y permite copiar configuraciones fácilmente.  \n- **Contexto de uso:** juegos, editores gráficos, o cuando la creación de un objeto es costosa en tiempo o recursos y conviene copiar un modelo existente.  \n- **Ejemplo:** Una instancia de \"Figura\" (círculo, rectángulo) que se clona para crear nuevas figuras similares.\n\n## 2. Patrones estructurales\n\nEstos patrones facilitan la composición de clases y objetos para formar estructuras más grandes y flexibles.\n\n### Adapter\n\n- **Propósito:** permitir la colaboración entre clases con interfaces incompatibles, transformando la interfaz de una clase en otra esperada por el cliente.  \n- **Beneficios:** posibilita el uso de clases existentes en nuevos contextos sin modificar su código.  \n- **Contexto de uso:** integración de sistemas antiguos con sistemas nuevos, o integración de librerías externas con la aplicación.  \n- **Ejemplo:** Un adaptador que convierte la salida de una API de pagos para que sea compatible con la interfaz interna del sistema.\n\n### Bridge\n\n- **Propósito:** separar una abstracción de su implementación, permitiendo que ambas evolucionen de forma independiente.  \n- **Beneficios:** reduce el acoplamiento entre jerarquías de abstracción e implementación, facilita la extensión y el mantenimiento.  \n- **Contexto de uso:** sistemas que requieren combinar múltiples variantes de una abstracción y múltiples variantes de implementación, sin multiplicar clases.  \n- **Ejemplo:** Un sistema de documentos (\"Documento\") que puede combinarse con diferentes formas de exportar (\"ExportadorPDF\", \"ExportadorHTML\"), permitiendo nuevas combinaciones sin modificar el resto del sistema.\n\n### Composite\n\n- **Propósito:** componer objetos en estructuras de árbol para representar jerarquías parte-todo, permitiendo que los clientes traten objetos simples y compuestos de manera uniforme.  \n- **Beneficios:** simplifica el código cliente, permite operaciones recursivas y jerarquías complejas.  \n- **Contexto de uso:** menús de aplicaciones, sistemas de archivos, estructuras gráficas o de organización.  \n- **Ejemplo:** Un menú de sistema con opciones simples y submenús, tratados todos como \"ElementoMenu\".\n\n### Decorator\n\n- **Propósito:** añadir responsabilidades adicionales a un objeto de manera dinámica, sin modificar la clase original.  \n- **Beneficios:** permite agregar funcionalidades a objetos individuales de forma flexible, favoreciendo la composición sobre la herencia.  \n- **Contexto de uso:** cuando se requieren combinaciones dinámicas de funcionalidades, como agregar cifrado, compresión o logs a una clase base.  \n- **Ejemplo:** Un \"NotificadorConEncriptación\" que extiende un \"Notificador\" agregando cifrado antes de enviar mensajes.\n\n### Facade\n\n- **Propósito:** proporcionar una interfaz unificada y simplificada a un conjunto de interfaces de un subsistema complejo.  \n- **Beneficios:** reduce la complejidad y el acoplamiento del sistema, facilitando el uso de subsistemas.  \n- **Contexto de uso:** aplicaciones con muchos módulos o APIs complejas, donde conviene simplificar la interacción para el cliente.  \n- **Ejemplo:** Una \"FachadaBancaria\" que expone métodos simples para operaciones bancarias y oculta la lógica interna de cuentas, tarjetas y préstamos.\n\n### Flyweight\n\n- **Propósito:** reducir el consumo de memoria compartiendo partes de objetos entre muchas instancias, cuando estas comparten datos en común.  \n- **Beneficios:** eficiencia y escalabilidad en sistemas con gran cantidad de objetos similares.  \n- **Contexto de uso:** edición de texto, juegos, gráficos vectoriales donde se crean muchos objetos ligeros.  \n- **Ejemplo:** Objetos \"Caracter\" que comparten la misma representación de letra en diferentes posiciones de un documento.\n\n### Proxy\n\n- **Propósito:** proporcionar un representante o intermediario para controlar el acceso a otro objeto, gestionando su creación, acceso o protección.  \n- **Beneficios:** controla acceso remoto, carga diferida, protección y registro.  \n- **Contexto de uso:** control de acceso a recursos, optimización de cargas pesadas, proxies de red.  \n- **Ejemplo:** Un \"ProxyImagen\" que gestiona la carga de una imagen desde disco sólo cuando se necesita mostrarla.\n\n## 3. Patrones de comportamiento\n\nEstos patrones se enfocan en cómo los objetos interactúan y distribuyen responsabilidades.\n\n### Chain of Responsibility\n\n- **Propósito:** evitar el acoplamiento entre el emisor y el receptor de una petición, pasando la solicitud por una cadena de objetos hasta que uno la maneje.  \n- **Beneficios:** flexibilidad para agregar, quitar o reordenar manejadores en tiempo de ejecución.  \n- **Contexto de uso:** validaciones en formularios, procesamiento de eventos, sistemas de soporte o autorización.  \n- **Ejemplo:** Una cadena de objetos de validación de entrada para un formulario de usuario.\n\n### Command\n\n- **Propósito:** encapsular una solicitud como un objeto, permitiendo parametrizar clientes con diferentes operaciones, almacenar operaciones y soportar deshacer/rehacer.  \n- **Beneficios:** desacopla quien solicita la acción de quien la ejecuta, permite colas de comandos y operaciones deshacer.  \n- **Contexto de uso:** menús, barras de herramientas, sistemas con operaciones que pueden programarse o deshacerse.  \n- **Ejemplo:** Un comando \"GuardarDocumento\" ejecutable y reversible en un editor de texto.\n\n### Interpreter\n\n- **Propósito:** definir una representación y un intérprete para el lenguaje de un dominio específico (\"DSL\").  \n- **Beneficios:** facilita la construcción de analizadores o ejecutores de lenguajes simples.  \n- **Contexto de uso:** interpretación de comandos, procesamiento de expresiones matemáticas, reglas de negocio.  \n- **Ejemplo:** Un intérprete que evalúa expresiones aritméticas ingresadas por el usuario.\n\n### Iterator\n\n- **Propósito:** proporcionar una manera estándar de recorrer una colección de objetos sin exponer su estructura interna.  \n- **Beneficios:** separa el recorrido de la lógica interna, permite múltiples tipos de recorridos.  \n- **Contexto de uso:** listas, árboles, colecciones complejas.  \n- **Ejemplo:** Un \"IteradorDeLista\" que permite recorrer los elementos de una lista de clientes.\n\n### Mediator\n\n- **Propósito:** centralizar la comunicación entre objetos para reducir dependencias directas y simplificar la interacción.  \n- **Beneficios:** disminuye el acoplamiento y mejora la modularidad del sistema.  \n- **Contexto de uso:** interfaces gráficas, sistemas donde muchos objetos se comunican entre sí.  \n- **Ejemplo:** Un \"MediadorChat\" que coordina el envío de mensajes entre usuarios en una sala de chat.\n\n### Memento\n\n- **Propósito:** capturar y almacenar el estado interno de un objeto para poder restaurarlo más tarde, sin violar el encapsulamiento.  \n- **Beneficios:** permite deshacer cambios y restaurar estados anteriores de forma segura.  \n- **Contexto de uso:** editores, sistemas de juego, historial de cambios en documentos.  \n- **Ejemplo:** Un \"MementoDocumento\" que almacena versiones previas del documento.\n\n### Observer\n\n- **Propósito:** establecer una relación de dependencia uno-a-muchos, de modo que cuando el objeto observado cambia, notifica automáticamente a sus observadores.  \n- **Beneficios:** promueve el bajo acoplamiento y facilita la extensión de funcionalidad.  \n- **Contexto de uso:** sistemas de eventos, interfaces de usuario, modelos \"pub/sub\".  \n- **Ejemplo:** Un \"SensorDeTemperatura\" que notifica a varias pantallas cuando la temperatura cambia.\n\n### State\n\n- **Propósito:** permitir que un objeto cambie su comportamiento cuando su estado interno cambia, comportándose como si fuera de otra clase.  \n- **Beneficios:** organiza los comportamientos dependientes del estado, evitando condicionales complejos.  \n- **Contexto de uso:** máquinas de estados, flujos de trabajo, sistemas con diferentes modos operativos.  \n- **Ejemplo:** Un objeto \"Semáforo\" que alterna entre los estados de “verde”, “amarillo” y “rojo”, cambiando su comportamiento según su estado actual.\n\n### Strategy\n\n- **Propósito:** definir una familia de algoritmos, encapsular cada uno y hacerlos intercambiables, permitiendo que el algoritmo varíe independientemente del cliente.  \n- **Beneficios:** favorece el código flexible y la selección dinámica de algoritmos.  \n- **Contexto de uso:** algoritmos de ordenamiento, cálculos tributarios, estrategias de juego.  \n- **Ejemplo:** Un \"CalculadorDeDescuento\" que selecciona la estrategia de cálculo adecuada según el tipo de cliente.\n\n### Template Method\n\n- **Propósito:** definir el esqueleto de un algoritmo, dejando que algunos pasos sean implementados por subclases.  \n- **Beneficios:** promueve la reutilización de código y la personalización controlada.  \n- **Contexto de uso:** procesos que tienen una estructura fija con pasos variables.  \n- **Ejemplo:** Una clase \"ProcesadorDeArchivo\" que define el proceso general de lectura y procesamiento, permitiendo que subclases definan cómo procesar cada línea.\n\n### Visitor\n\n- **Propósito:** separar una operación de la estructura de objetos sobre la que opera, permitiendo añadir nuevas operaciones sin modificar las clases de esos objetos.  \n- **Beneficios:** facilita la adición de funcionalidades y el mantenimiento del sistema.  \n- **Contexto de uso:** recorridos de estructuras de datos, análisis sintáctico, operaciones sobre árboles o colecciones heterogéneas.  \n- **Ejemplo:** Un visitante que recorre un sistema de archivos y calcula el tamaño total de todos los archivos.\n\n# Otros patrones de diseño reconocidos\n\nAdemás de los patrones clásicos de \"GoF\", la literatura y la práctica profesional han documentado otros patrones de diseño ampliamente utilizados, que resuelven problemas comunes en la construcción y mantenimiento de sistemas de software.\n\n### Null Object [@buschmann1996pattern]\n\n- **Propósito:** eliminar la necesidad de comprobaciones explícitas de valores nulos, implementando un objeto “vacío” que cumple la interfaz requerida sin realizar ninguna acción.  \n- **Beneficios:** simplifica el código cliente, evita errores por referencias nulas (\"null pointer exceptions\"), y mejora la robustez y legibilidad.  \n- **Contexto de uso:** cuando es común que un objeto pueda estar ausente, y se desea evitar condicionales repetidos o comportamientos especiales para el caso nulo.  \n- **Ejemplo:** En un sistema de notificaciones, si no hay un notificador activo, se puede usar un objeto \"NotificadorNulo\" que implementa la interfaz de notificación pero no realiza ninguna acción al llamar al método \"enviar()\".\n\n### Object Pool [@buschmann1996pattern]\n\n- **Propósito:** gestionar y reutilizar un conjunto de objetos costosos de crear, manteniéndolos en un “pool” y sirviéndolos a los clientes según demanda.  \n- **Beneficios:** reduce la sobrecarga de instanciación y destrucción repetitiva de objetos, mejora el rendimiento y la utilización de recursos.  \n- **Contexto de uso:** conexiones a bases de datos, hilos, buffers, o cualquier recurso cuyo costo de creación sea significativo.  \n- **Ejemplo:** Un pool de conexiones a la base de datos que entrega instancias disponibles y las reutiliza cuando se liberan.\n\n### Dependency Injection [@fowler2004ioc]\n\n- **Propósito:** desacoplar la creación y la gestión de dependencias de los objetos, delegando su provisión a un contenedor externo o al propio framework.  \n- **Beneficios:** favorece la inyección de diferentes implementaciones, mejora la testabilidad, facilita la configuración y la extensión del sistema.  \n- **Contexto de uso:** sistemas grandes con múltiples dependencias, frameworks modernos como \"Spring\", \"Angular\" o \".NET Core\".  \n- **Ejemplo:** Un servicio de autenticación recibe un repositorio de usuarios por inyección, lo que permite sustituirlo fácilmente por un repositorio de pruebas en los tests.\n\n### Specification [@evans2004ddd]\n\n- **Propósito:** encapsular criterios de selección, validación o filtrado en objetos “especificación”, que pueden combinarse y reutilizarse.  \n- **Beneficios:** mejora la claridad y flexibilidad de las reglas de negocio, favorece la reutilización y la composición de criterios complejos.  \n- **Contexto de uso:** validación de reglas de negocio, filtros en consultas, construcción de criterios dinámicos.  \n- **Ejemplo:** Un objeto \"EspecificacionClienteVIP\" define el criterio para identificar clientes VIP; puede combinarse con otras especificaciones para consultas más complejas.","srcMarkdownNoYaml":""},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"05-clasificacion-patrones.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}