{"title":"Patrones de diseño más allá de \"GoF\"","markdown":{"headingText":"Patrones de diseño más allá de \"GoF\"","containsRefs":false,"markdown":"\nSi bien los patrones de diseño clásicos definidos por Gamma et al. (\"GoF\") [@gamma1994design] han sido fundamentales para el desarrollo orientado a objetos, el avance de la tecnología, la complejidad de los sistemas y la diversidad de paradigmas han impulsado la aparición de nuevos patrones que atienden desafíos actuales como la escalabilidad, integración, resiliencia y adaptabilidad.\n\n## 1. Patrones arquitectónicos\n\nEstos patrones resuelven problemas recurrentes en la estructura global y la organización de sistemas de software, operando en un nivel de abstracción superior al de los patrones de diseño clásicos. Mientras estos últimos se centran en la colaboración entre clases y objetos dentro de componentes individuales, los arquitectónicos abordan la disposición de módulos principales, su comunicación y la facilitación de escalabilidad y mantenimiento a nivel de todo el sistema [@gamma1994design, @buschmann1996pattern].\n\nA continuación, se describen algunos de los patrones arquitectónicos más relevantes en el desarrollo de software moderno:\n\n### MVC (\"Modelo-Vista-Controlador\") [@buschmann1996pattern]\n\n- **Propósito:** separar la lógica de negocio, la interfaz de usuario y el control de eventos/acciones, facilitando la gestión modular de aplicaciones.  \n- **Beneficios:** promueve el mantenimiento, la reutilización de componentes y el desarrollo en paralelo de distintas partes del sistema.  \n- **Contexto de uso:** aplicaciones web y de escritorio que requieren una clara separación entre presentación y lógica.  \n- **Ejemplo:** En una aplicación de reservas, el modelo gestiona los datos de las reservas, la vista muestra las fechas y horarios, y el controlador procesa las acciones del usuario.\n\n### Microservicios [@newman2015building]\n\n- **Propósito:** organizar una aplicación como un conjunto de servicios pequeños, independientes y desplegables de manera autónoma.  \n- **Beneficios:** facilita la escalabilidad horizontal, la resiliencia y la evolución independiente de los distintos servicios; favorece equipos autónomos.  \n- **Contexto de uso:** sistemas con alta demanda de escalabilidad y despliegue frecuente, como plataformas de streaming, banca digital o comercio electrónico.  \n- **Ejemplo:** Un sistema de compras online donde la gestión de productos, pagos y envíos se realiza mediante servicios independientes que se comunican vía API.\n\n### Microkernel (\"Plug-in\") [@buschmann1996pattern]\n\n- **Propósito:** permitir la extensión dinámica de funcionalidades mediante módulos o \"plug-ins\" sobre un núcleo central.  \n- **Beneficios:** posibilita adaptar o ampliar el sistema sin modificar el núcleo ni detener su operación; fomenta la extensibilidad y personalización.  \n- **Contexto de uso:** aplicaciones extensibles como editores de texto, IDEs o servidores de aplicaciones.  \n- **Ejemplo:** Un editor de texto al que se pueden agregar \"plug-ins\" para soporte de nuevos lenguajes o funciones avanzadas.\n\n## 2. Patrones de integración\n\nEn sistemas distribuidos y arquitecturas modernas, los patrones de integración abordan problemas de comunicación, coordinación y sincronización entre componentes heterogéneos, frecuentemente implementados en distintas plataformas o tecnologías. Estos patrones facilitan la interoperabilidad, la escalabilidad y la consistencia de los datos a través de soluciones probadas para la transferencia y procesamiento de mensajes, comandos y eventos [@hohpe2003enterprise].\n\n### Broker [@hohpe2003enterprise]\n\n- **Propósito:** centralizar y gestionar la comunicación entre componentes distribuidos, actuando como intermediario para desacoplar emisores y receptores.  \n- **Beneficios:** facilita la escalabilidad, la gestión de mensajes y la interoperabilidad entre sistemas heterogéneos.  \n- **Contexto de uso:** integración de aplicaciones empresariales, middleware, sistemas distribuidos.  \n- **Ejemplo:** Un sistema financiero donde los servicios de cuentas, pagos y notificaciones interactúan a través de un broker de mensajes como \"Kafka\".\n\n### Event Sourcing [@fowler2005eventsourcing]\n\n- **Propósito:** almacenar todos los cambios de estado de un sistema como eventos inmutables, en vez de solo guardar el estado actual.  \n- **Beneficios:** permite trazabilidad completa, deshacer acciones, reconstruir el estado histórico y facilita la auditoría.  \n- **Contexto de uso:** aplicaciones con requerimientos de auditoría, historial o reversión, como sistemas de órdenes, logística o control de inventario.  \n- **Ejemplo:** Un sistema de pedidos que registra cada creación, modificación y cancelación como eventos, permitiendo reconstruir el historial completo de un pedido.\n\n### CQRS (\"Command Query Responsibility Segregation\") [@fowler2005eventsourcing]\n\n- **Propósito:** separar los modelos para comandos (escritura) y consultas (lectura) para optimizar el rendimiento y la escalabilidad.  \n- **Beneficios:** especialización y optimización de los modelos, mejoras en el rendimiento y la seguridad, escalabilidad independiente de lectura y escritura.  \n- **Contexto de uso:** sistemas donde las operaciones de consulta y actualización tienen diferentes requisitos de rendimiento o escalabilidad, como plataformas de comercio electrónico.  \n- **Ejemplo:** Un sistema de ventas con una base de datos para registrar compras y otra, optimizada para reportes y consultas rápidas.\n\n## 3. Patrones para la nube y sistemas distribuidos\n\nLas arquitecturas \"cloud\" y los sistemas distribuidos modernos presentan nuevos retos en cuanto a resiliencia, descubrimiento de servicios, balanceo de carga y tolerancia a fallos. Los siguientes patrones permiten abordar estos desafíos, facilitando la operación confiable y escalable de aplicaciones en la nube y entornos distribuidos [@newman2015building, @nygard2007release].\n\n### Circuit Breaker [@nygard2007release]\n\n- **Propósito:** proteger a un sistema de llamadas repetidas a servicios fallidos, evitando la sobrecarga y permitiendo una recuperación controlada.  \n- **Beneficios:** mejora la resiliencia y estabilidad general, evita cascadas de fallos en sistemas distribuidos.  \n- **Contexto de uso:** arquitecturas de microservicios, servicios que dependen de recursos externos o APIs poco confiables.  \n- **Ejemplo:** Una aplicación que detecta que el sistema de pagos externo está caído y, temporalmente, deja de enviar solicitudes para evitar saturar el sistema.\n\n### API Gateway [@newman2015building]\n\n- **Propósito:** centralizar el acceso a múltiples servicios de backend a través de un punto de entrada único.  \n- **Beneficios:** simplifica la gestión de autenticación, control de tráfico, transformación de mensajes y monitoreo de servicios; mejora la experiencia de clientes.  \n- **Contexto de uso:** arquitecturas de microservicios y aplicaciones móviles/web que consumen múltiples servicios internos.  \n- **Ejemplo:** Un \"API Gateway\" que recibe solicitudes de apps móviles y las distribuye a servicios internos de usuarios, productos y pedidos.\n\n### Service Discovery [@newman2015building]\n\n- **Propósito:** permitir que los servicios encuentren y se comuniquen automáticamente entre sí en entornos dinámicos y escalables.  \n- **Beneficios:** facilita el escalado, la actualización de servicios y la tolerancia a fallos sin intervención manual.  \n- **Contexto de uso:** orquestadores de contenedores (\"Kubernetes\", \"Docker Swarm\"), sistemas con servicios que cambian de ubicación frecuentemente.  \n- **Ejemplo:** En \"Kubernetes\", los servicios se descubren dinámicamente a través de DNS interno y etiquetas, sin configuración manual de direcciones IP.\n\n## 4. Patrones idiomáticos de lenguajes modernos\n\nAlgunos lenguajes y plataformas han dado lugar a patrones específicos que explotan sus capacidades particulares, promoviendo soluciones idiomáticas que aprovechan las ventajas del lenguaje y su ecosistema [@donovan2016go].\n\n### Channels (\"Go\") [@donovan2016go]\n\n- **Propósito:** facilitar la comunicación segura y concurrencia entre procesos (\"goroutines\") mediante el paso de mensajes.  \n- **Beneficios:** elimina muchos problemas asociados a \"locks\" y condiciones, promoviendo un modelo seguro y fácil de entender.  \n- **Contexto de uso:** aplicaciones concurrentes y paralelas escritas en \"Go\", procesamiento en tiempo real.  \n- **Ejemplo:** Una aplicación web en \"Go\" usa canales para enviar tareas desde el servidor HTTP a los workers que las procesan en paralelo.\n\n### Option/Result (\"Rust\") [@klabnik2018rust]\n\n- **Propósito:** gestionar el manejo seguro de valores opcionales (que pueden o no estar presentes) y el control explícito de errores sin usar excepciones.  \n- **Beneficios:** promueve código seguro y robusto, obliga al programador a manejar casos de error o ausencia de valores.  \n- **Contexto de uso:** desarrollo en \"Rust\", especialmente en funciones que pueden fallar o devolver valores nulos.  \n- **Ejemplo:** En \"Rust\", una función que puede devolver un valor o no (\"Option<T>\") o que puede fallar (\"Result<T, E>\"), forzando al programador a manejar ambos casos.\n\n### Promise/Async Await (\"JavaScript\", \"Python\", \"C#\") [@crockford2008javascript]\n\n- **Propósito:** manejar operaciones asincrónicas de forma legible y controlada, evitando el “callback hell”.  \n- **Beneficios:** facilita la programación reactiva y el trabajo con operaciones I/O, redes o temporizadores.  \n- **Contexto de uso:** desarrollo web frontend y backend, aplicaciones que requieren concurrencia y manejo de múltiples eventos.  \n- **Ejemplo:** Una función en \"JavaScript\" utiliza \"async\" y \"await\" para esperar la respuesta de una API antes de continuar con la ejecución.","srcMarkdownNoYaml":""},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"06-patrones-mas-alla-gof.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}