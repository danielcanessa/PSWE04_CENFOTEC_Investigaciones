{"title":"Principios de diseño: SOLID y GRASP","markdown":{"headingText":"Principios de diseño: SOLID y GRASP","containsRefs":false,"markdown":"\nEl diseño de software en el paradigma orientado a objetos se apoya en principios fundamentales que guían la toma de decisiones para lograr sistemas de alta calidad. Entre los más reconocidos y aplicados en la industria destacan los principios \"SOLID\" y los patrones \"GRASP\". Estos proporcionan criterios claros para la asignación de responsabilidades, la gestión de dependencias y la evolución sostenible del software, facilitando la correcta aplicación de patrones de diseño [@gamma1994design, @buschmann1996pattern].\n\n## Principios SOLID\n\nEl acrónimo \"SOLID\" agrupa cinco principios esenciales, formulados por Robert C. Martin (\"Uncle Bob\") para guiar el diseño y la implementación de clases y objetos en \"OOP\". Estos principios fomentan la cohesión y reducen el acoplamiento entre los componentes del software, facilitando su evolución, extensión y mantenimiento a largo plazo [@gamma1994design, @buschmann1996pattern].\n\n- **Principio de Responsabilidad Única (SRP):** una clase debe tener una única responsabilidad, es decir, solo una razón para cambiar.  \n  _Ejemplo:_ Una clase \"GestorDeUsuarios\" que solo administra usuarios, y no reportes ni validaciones externas.\n\n- **Principio Open/Close (OCP):** las entidades de software deben estar abiertas para su extensión, pero cerradas para su modificación.  \n  _Ejemplo:_ Implementar nuevas formas de pago añadiendo nuevas clases que implementan una interfaz \"Pago\", sin modificar el código existente.\n\n- **Principio de Sustitución de Liskov (LSP):** los objetos de una subclase deben poder sustituir a los de la clase base sin alterar el funcionamiento correcto del sistema.  \n  _Ejemplo:_ Una clase \"PatoDeGoma\" que implementa a \"Pato\" debe poder usarse donde se espera un \"Pato\", sin romper la lógica.\n\n- **Principio de Segregación de Interfaces (ISP):** es preferible definir varias interfaces específicas y pequeñas antes que una interfaz general y amplia.  \n  _Ejemplo:_ Interfaces separadas \"Imprimible\" y \"Escaneable\" en vez de una única interfaz \"DispositivoMultifunción\".\n\n- **Principio de Inversión de Dependencias (DIP):** los módulos de alto nivel no deben depender de módulos de bajo nivel; ambos deben depender de abstracciones.  \n  _Ejemplo:_ Una clase \"ControladorDeLuz\" depende de la interfaz \"Interruptor\", no de una implementación concreta.\n\n## Patrones GRASP\n\nLos patrones \"GRASP\" (\"General Responsibility Assignment Software Patterns\"), propuestos por Craig Larman, ofrecen un marco para asignar responsabilidades en \"OOP\" [@buschmann1996pattern, @schmidt1995using]. Cada patrón proporciona una respuesta estructurada a preguntas clave sobre cómo distribuir tareas y relaciones entre clases y objetos:\n\n- **Creador (Creator):** indica qué clase debe ser responsable de crear instancias de otras clases, basándose en la posesión o uso de los objetos creados.  \n  _Ejemplo:_ Una clase \"Pedido\" crea instancias de \"DetalleDePedido\" porque \"Pedido\" está compuesto por varios detalles, y administra el ciclo de vida de esos objetos.\n\n- **Experto en información (Information Expert):** asigna la responsabilidad a la clase que tiene la información necesaria para cumplirla de manera eficiente.  \n  _Ejemplo:_ Una clase \"CuentaBancaria\" calcula su saldo porque posee la información de los movimientos.\n\n- **Controlador (Controller):** sugiere la introducción de un objeto intermediario que reciba y coordine solicitudes provenientes de la interfaz de usuario u otros sistemas externos.  \n  _Ejemplo:_ Un objeto \"ControladorDeReservas\" recibe las solicitudes de la interfaz de usuario para crear, modificar o cancelar reservas, y coordina las operaciones necesarias sobre los objetos \"Reserva\", \"Cliente\" y \"Habitación\".\n\n- **Bajo acoplamiento (Low Coupling):** favorece el diseño de clases y módulos con dependencias mínimas, promoviendo la flexibilidad y facilidad de cambio.  \n  _Ejemplo:_ Una clase \"Reporte\" que recibe sus dependencias vía interfaces, no crea instancias concretas internamente.\n\n- **Alta cohesión (High Cohesion):** promueve que las clases agrupen responsabilidades altamente relacionadas, evitando clases que gestionen tareas que no le corresponden.  \n  _Ejemplo:_ Una clase \"GestorDeClientes\" se ocupa solo de operaciones sobre clientes, no de facturación ni inventarios.\n\n- **Polimorfismo (Polymorphism):** permite que diferentes tipos de objetos respondan a la misma interfaz o mensaje, haciendo posible que una misma operación se ejecute de distintas formas según el contexto. El polimorfismo se puede dar a nivel de clases (mediante herencia e interfaces) y a nivel de funciones (mediante sobrecarga o uso de genéricos).  \n  _Ejemplo:_ Una interfaz \"Notificación\" define el método \"enviar()\". Tanto \"NotificaciónPorCorreo\" como \"NotificaciónPorSMS\" implementan este método con lógica diferente. El sistema puede usar una referencia de tipo \"Notificación\" para invocar \"enviar()\", la implementación concreta dependerá del tipo real del objeto.\n\n- **Fabricación pura (Pure Fabrication):** plantea la creación de clases que no representan conceptos del dominio real, sino que existen únicamente para lograr un diseño más flexible, reutilizable o desacoplado.  \n  _Ejemplo:_ Una clase \"ServicioDeAutenticación\" que gestiona la verificación de credenciales y el manejo de sesiones de usuario, pero no representa un concepto real del dominio, sino que existe para separar responsabilidades y mejorar la reutilización del código.\n\n- **Indirección (Indirection):** introduce un objeto intermediario para desacoplar dos elementos, facilitando la extensibilidad y permitiendo cambios en uno de los extremos sin afectar al otro.  \n  _Ejemplo:_ El patrón \"Adapter\", donde una clase adapta la interfaz de un componente externo para que pueda ser utilizado por el sistema.\n\n- **Variaciones protegidas (Protected Variations):** identifica los puntos donde es probable que ocurran cambios o variaciones y los protege mediante abstracciones, minimizando el impacto de los cambios futuros.  \n  _Ejemplo:_ Definir una interfaz \"Almacenamiento\" y tener varias implementaciones (\"AlmacenamientoEnMemoria\", \"AlmacenamientoEnDisco\") para proteger el resto del sistema de cambios en la forma de almacenamiento.","srcMarkdownNoYaml":""},"formats":{"pdf":{"identifier":{"display-name":"PDF","target-format":"pdf","base-format":"pdf"},"execute":{"fig-width":5.5,"fig-height":3.5,"fig-format":"pdf","fig-dpi":300,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"pdf","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":true,"merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"pdf-engine":"xelatex","standalone":true,"variables":{"graphics":true,"tables":true},"default-image-extension":"pdf","to":"pdf","output-file":"04-principios-solid-grasp.pdf"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"block-headings":true,"bibliography":["references.bib"],"documentclass":"scrreprt"},"extensions":{"book":{"selfContainedOutput":true}}}},"projectFormats":["pdf"]}